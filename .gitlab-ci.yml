stages:
  - Lint
  - Test
  - Build

#
# Lint
#

shellcheck:
  stage: Lint
  image: alpine:latest

  before_script:
    - apk add shellcheck

  script:
    - find ./bin/ -name '*.sh' -exec shellcheck {} +

pylint:
  stage: Lint
  image: python:3.8-slim

  before_script:
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    - pip install pylint-gitlab

  script:
    - pylint $(find -not -path "./examples/*" -type f -name "*.py" ! -path "**/.venv/**") || exit "$?"
    - pylint --output-format=text $(find -not -path "./examples/*" -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - pylint --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -not -path "./examples/*" -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
    - pylint --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -not -path "./examples/*" -type f -name "*.py" ! -path "**/.venv/**") > public/lint/index.html

  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"

  artifacts:
    paths:
      - public
    reports:
      codequality: codeclimate.json
    when: always

#
# Test
#

Unit tests:
  stage: Test
  image: python:3.8-slim

  before_script:
    - pip install -r requirements.txt

  script:
    - python3 src/test.py

Algorithm tests:
  stage: Test
  image: ubuntu:latest

  before_script:
    - apt-get -yq update
    - apt-get -yq install curl jq software-properties-common
    - add-apt-repository -y ppa:deadsnakes/ppa
    - apt-get -yq update
    - add-apt-repository universe
    - apt-get -yq update
    - apt-get -yq install python3.8 python3.8-dev python3-pip
    - pip3 install -r requirements.txt

  script:
    - ./bin/run-tests.sh

  artifacts:
    paths:
      - out
      - logs
    when: always

#
# Build
#

Build Image:
  stage: Build
  image: docker:19.03.12

  only:
    - master

  variables:
    CI_IMAGE_NAME: syga/engine

  before_script:
    - docker info
    - docker login --username "${CI_REGISTRY_USER}" --password "${CI_REGISTRY_PASSWORD}"

  script:
    - docker build --pull -t "${CI_IMAGE_NAME}" .
    - docker push "${CI_IMAGE_NAME}"
